{"ast":null,"code":"import axios from 'axios';\nimport types from './index';\nexport const login = (creds, cb) => dispatch => {\n  dispatch({\n    type: types.LOGIN_START\n  });\n  return axios.post('https://empoweredconversation.herokuapp.com/oauth/token', creds, {\n    headers: {\n      Authorization: \"Basic \".concat(btoa('lambda-client:lambda-secret')),\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }).then(res => {\n    localStorage.setItem('token', res.data.access_token);\n    dispatch({\n      type: types.LOGIN_SUCCESS\n    });\n    cb();\n    return true;\n  }).catch(err => {\n    dispatch({\n      type: types.LOGIN_FAILURE,\n      error: err\n    });\n    console.log('ERROR', err);\n  });\n};\nexport const register = (creds, cb) => dispatch => {\n  dispatch({\n    type: types.REGISTER_START\n  });\n  return axios.post('https://empoweredconversation.herokuapp.com/createnewuser', creds).then(res => {\n    dispatch({\n      type: types.REGISTER_SUCCESS\n    });\n    cb();\n  }).catch(err => {\n    dispatch({\n      type: types.REGISTER_FAILURE\n    });\n    console.log('err from register', err);\n  });\n};","map":{"version":3,"sources":["C:\\Users\\Acidblue\\OneDrive\\___lambda\\___Labs14\\frontend\\empoweredconvofrontend\\src\\actions\\authActions.js"],"names":["axios","types","login","creds","cb","dispatch","type","LOGIN_START","post","headers","Authorization","btoa","then","res","localStorage","setItem","data","access_token","LOGIN_SUCCESS","catch","err","LOGIN_FAILURE","error","console","log","register","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAeC,QAAQ,IAAI;AAC9CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd,GAAD,CAAR;AACA,SAAOP,KAAK,CACTQ,IADI,CACC,yDADD,EAC4DL,KAD5D,EACmE;AACtEM,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,kBAAWC,IAAI,CAAC,6BAAD,CAAf,CADN;AAEP,sBAAgB;AAFT;AAD6D,GADnE,EAOJC,IAPI,CAOCC,GAAG,IAAI;AACXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAAG,CAACG,IAAJ,CAASC,YAAvC;AACAZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,KAAK,CAACiB;AAAd,KAAD,CAAR;AACAd,IAAAA,EAAE;AACF,WAAO,IAAP;AACD,GAZI,EAaJe,KAbI,CAaEC,GAAG,IAAI;AACZf,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,KAAK,CAACoB,aAAd;AAA6BC,MAAAA,KAAK,EAAEF;AAApC,KAAD,CAAR;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,GAArB;AACD,GAhBI,CAAP;AAiBD,CAnBM;AAqBP,OAAO,MAAMK,QAAQ,GAAG,CAACtB,KAAD,EAAQC,EAAR,KAAeC,QAAQ,IAAI;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,KAAK,CAACyB;AAAd,GAAD,CAAR;AACA,SAAO1B,KAAK,CACTQ,IADI,CACC,2DADD,EAC8DL,KAD9D,EAEJS,IAFI,CAECC,GAAG,IAAI;AACXR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,KAAK,CAAC0B;AAAd,KAAD,CAAR;AACAvB,IAAAA,EAAE;AACH,GALI,EAMJe,KANI,CAMEC,GAAG,IAAI;AACZf,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,KAAK,CAAC2B;AAAd,KAAD,CAAR;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,GAAjC;AACD,GAVI,CAAP;AAWD,CAbM","sourcesContent":["import axios from 'axios';\r\nimport types from './index';\r\n\r\nexport const login = (creds, cb) => dispatch => {\r\n  dispatch({ type: types.LOGIN_START });\r\n  return axios\r\n    .post('https://empoweredconversation.herokuapp.com/oauth/token', creds, {\r\n      headers: {\r\n        Authorization: `Basic ${btoa('lambda-client:lambda-secret')}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n    .then(res => {\r\n      localStorage.setItem('token', res.data.access_token);\r\n      dispatch({ type: types.LOGIN_SUCCESS });\r\n      cb();\r\n      return true;\r\n    })\r\n    .catch(err => {\r\n      dispatch({ type: types.LOGIN_FAILURE, error: err });\r\n      console.log('ERROR', err);\r\n    });\r\n};\r\n\r\nexport const register = (creds, cb) => dispatch => {\r\n  dispatch({ type: types.REGISTER_START });\r\n  return axios\r\n    .post('https://empoweredconversation.herokuapp.com/createnewuser', creds)\r\n    .then(res => {\r\n      dispatch({ type: types.REGISTER_SUCCESS });\r\n      cb();\r\n    })\r\n    .catch(err => {\r\n      dispatch({ type: types.REGISTER_FAILURE });\r\n\r\n      console.log('err from register', err);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}