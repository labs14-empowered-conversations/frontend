{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Acidblue\\\\OneDrive\\\\___lambda\\\\___Labs14\\\\frontend\\\\empoweredconvofrontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Acidblue\\\\OneDrive\\\\___lambda\\\\___Labs14\\\\frontend\\\\empoweredconvofrontend\\\\src\\\\components\\\\Form\\\\FormView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport componentUpdate from 'redux-state-manage';\nimport { initializeConvo } from '../../actions/initConvoActions';\nimport { Form, Checkbox } from 'formsy-semantic-ui-react';\nimport { Button, Header, Container, Modal, Segment, Grid, Input as SInput, Form as SForm, Loader } from 'semantic-ui-react';\nimport TOS from './TOS';\nimport './Form.css';\nimport ReactGA from 'react-ga';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass FormView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      convoRequest: {\n        survivornumber: '',\n        ffname: '',\n        ffnumber: ''\n      },\n      isModal1Open: false,\n      isModal2Open: false,\n      isVerified: false,\n      isVerifying: false,\n      columns: 1,\n      appKey: ''\n    };\n\n    this.submitHandler = e => {\n      componentUpdate.setState(this.state); // console.log('send text button hit');\n      // console.log('from submit', this.state.convoRequest.survivorPhoneNum);\n      // console.log('from submit', this.state.convoRequest.ffName);\n      // console.log('from submit', this.state.convoRequest.ffPhoneNum);\n\n      this.props.initializeConvo(_objectSpread({}, this.state.convoRequest, {\n        school: this.state.appKey === 'lorem' && 'ipsum' || this.state.appKey === 'ipsum' && 'lorem'\n      })).then(() => toast('Conversation started successfully!', {\n        type: 'success',\n        className: 'toast'\n      })); // this.handleModal2Open();\n\n      let clearedReq = {\n        survivornumber: '',\n        ffname: '',\n        ffnumber: ''\n      };\n      this.setState({\n        convoRequest: clearedReq\n      }, () => {\n        this.handleModal2Open();\n        ReactGA.event({\n          category: 'User',\n          action: 'Submit Convo Form'\n        });\n      });\n    };\n\n    this.handleModal1Open = () => {\n      this.setState({\n        isModal1Open: !this.state.isModal1Open\n      });\n    };\n\n    this.handleModal2Open = () => {\n      this.setState({\n        isModal2Open: !this.state.isModal2Open\n      });\n    };\n\n    this.changeKey = e => {\n      this.setState({\n        appKey: e.target.value\n      });\n    };\n\n    this.submitKey = e => {\n      let keys = ['ipsum', 'lorem'];\n      keys.includes(this.state.appKey) ? function (env) {\n        env.setState({\n          isVerifying: true\n        });\n        setTimeout(() => env.setState({\n          isVerified: true\n        }), 2000);\n      }(this) : alert('Invalid key');\n    };\n  }\n\n  componentDidMount() {\n    componentUpdate.setState();\n  }\n\n  // <- Is it this random bracket, here?\n  // we good\n  changeHandler({\n    target\n  }) {\n    this.setState({\n      convoRequest: _objectSpread({}, this.state.convoRequest, {\n        [target.name]: target.value\n      })\n    } // () => console.log(this.state.convoRequest, 'from change'),\n    );\n  }\n\n  render() {\n    let securityView = React.createElement(\"div\", {\n      className: \"security-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"security-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Please enter your provided App Key to continue\"), this.state.isVerifying ? React.createElement(React.Fragment, null, ' ', React.createElement(Loader, {\n      active: true,\n      size: \"massive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, ' ', \"Verifying...\", ' '), ' ') : React.createElement(React.Fragment, null, React.createElement(SForm, {\n      onSubmit: e => this.submitKey(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(SInput, {\n      size: \"huge\",\n      className: \"security-input\",\n      name: \"appKey\",\n      label: \"App Key\",\n      type: \"password\",\n      fluid: true,\n      onChange: e => this.changeKey(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      disabled: !this.state.appKey ? true : false,\n      size: \"huge\",\n      onClick: e => this.submitKey(e),\n      style: {\n        backgroundColor: '#2E2F38',\n        color: 'white'\n      },\n      toggle: true,\n      tabIndex: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Submit\"))));\n    let formView = React.createElement(\"div\", {\n      className: \"stage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"stage-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"stage-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Almost there . . .\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Placeholder; explanation on how to begin.\"), React.createElement(\"p\", {\n      className: \"required\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"* Required\")), React.createElement(\"div\", {\n      className: \"lime-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"float-plane\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      className: \"float-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"content-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onValidSubmit: () => this.handleModal2Open(),\n      size: 'large',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 1,\n      className: \"tablet mobile only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Lorem\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ipsa nostrum rem dignissimos est. Id quisquam nihil adipisci libero harum iste voluptatibus atque hic neque odit! Blanditiis et non voluptatem eius.\")), React.createElement(Form.Group, {\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      name: \"survivornumber\",\n      label: \"Your Phone Number \",\n      validations: \"isNumeric\",\n      value: this.state.convoRequest.survivornumber,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Reclefrgoruihre\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"mos est. Id quisquam nihil adipisci libero harum iste voluptatibus atque hic neque odit! Blanditiis et non voluptatem e\")), React.createElement(Form.Group, {\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      name: \"ffname\",\n      label: \"Recipient's Name \",\n      validations: \"isWords\",\n      value: this.state.convoRequest.ffname,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      name: \"ffnumber\",\n      label: \"Recipient's Phone Number \",\n      validations: \"isNumeric\",\n      value: this.state.convoRequest.ffnumber,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      className: \"computer only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Your Lorem\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"mos est. Id quisquam nihil adipisci libero harum iste voluptatibus atque hic neque odit! Blanditiis et non voluptatem e\")), React.createElement(Form.Group, {\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      name: \"survivornumber\",\n      label: \"Your Phone Number \",\n      validations: \"isNumeric\",\n      value: this.state.convoRequest.survivornumber,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Recipient's Lorem\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"mos est. Id quisquam nihil adipisci libero harum iste voluptatibus atque hic neque odit! Blanditiis et non voluptatem e\")), React.createElement(Form.Group, {\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      name: \"ffname\",\n      label: \"Recipient's Name \",\n      validations: \"isWords\",\n      value: this.state.convoRequest.ffname,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      name: \"ffnumber\",\n      label: \"Recipient's Phone Number \",\n      validations: \"isNumeric\",\n      value: this.state.convoRequest.ffnumber,\n      required: true,\n      onChange: e => this.changeHandler(e),\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"agree-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      className: \"termsCheckbox\",\n      name: \"survivorLiability\",\n      label: React.createElement(\"label\", {\n        className: \"agree-checktext\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"I accept the\", React.createElement(Modal, {\n        trigger: React.createElement(Header, {\n          as: \"h3\",\n          color: \"#2E2F38\",\n          content: 'Terms of Service',\n          onClick: this.handleModal1Open,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }),\n        open: this.state.isModalOpen,\n        onClose: this.handleModalOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, \"Terms of Service\"), React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(TOS, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      })))),\n      validations: \"isTrue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        size: \"huge\",\n        style: {\n          backgroundColor: '#2E2F38',\n          color: 'white'\n        },\n        content: 'Preview Text',\n        onValidSubmit: () => this.handleModal2Open(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }),\n      open: this.state.isModal2Open,\n      onClose: this.handleModal2Open,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Text Preview\"), React.createElement(Button, {\n      style: {\n        backgroundColor: '#2E2F38',\n        color: 'white'\n      },\n      size: \"large\",\n      onClick: () => this.submitHandler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Send Text\"))), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"preview-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"preview-img\",\n      src: \"assets/messagepreview.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }))))))))));\n    return React.createElement(React.Fragment, null, !this.state.isVerified ? securityView : formView);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSending: state.initConvo.isSending,\n    isSent: state.initConvo.isSent,\n    sendingError: state.initConvo.sendingError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  initializeConvo\n})(FormView);","map":{"version":3,"sources":["C:\\Users\\Acidblue\\OneDrive\\___lambda\\___Labs14\\frontend\\empoweredconvofrontend\\src\\components\\Form\\FormView.js"],"names":["React","connect","componentUpdate","initializeConvo","Form","Checkbox","Button","Header","Container","Modal","Segment","Grid","Input","SInput","SForm","Loader","TOS","ReactGA","toast","ToastContainer","FormView","Component","state","convoRequest","survivornumber","ffname","ffnumber","isModal1Open","isModal2Open","isVerified","isVerifying","columns","appKey","submitHandler","e","setState","props","school","then","type","className","clearedReq","handleModal2Open","event","category","action","handleModal1Open","changeKey","target","value","submitKey","keys","includes","env","setTimeout","alert","componentDidMount","changeHandler","name","render","securityView","backgroundColor","color","formView","isModalOpen","handleModalOpen","mapStateToProps","isSending","initConvo","isSent","sendingError"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport componentUpdate from 'redux-state-manage';\r\nimport { initializeConvo } from '../../actions/initConvoActions';\r\nimport { Form, Checkbox } from 'formsy-semantic-ui-react';\r\nimport {\r\n  Button,\r\n  Header,\r\n  Container,\r\n  Modal,\r\n  Segment,\r\n  Grid,\r\n  Input as SInput,\r\n  Form as SForm,\r\n  Loader,\r\n} from 'semantic-ui-react';\r\nimport TOS from './TOS';\r\nimport './Form.css';\r\nimport ReactGA from 'react-ga';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass FormView extends React.Component {\r\n  state = {\r\n    convoRequest: {\r\n      survivornumber: '',\r\n      ffname: '',\r\n      ffnumber: '',\r\n    },\r\n    isModal1Open: false,\r\n    isModal2Open: false,\r\n    isVerified: false,\r\n    isVerifying: false,\r\n    columns: 1,\r\n    appKey: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    componentUpdate.setState();\r\n  }\r\n\r\n  submitHandler = e => {\r\n    componentUpdate.setState(this.state);\r\n    // console.log('send text button hit');\r\n    // console.log('from submit', this.state.convoRequest.survivorPhoneNum);\r\n    // console.log('from submit', this.state.convoRequest.ffName);\r\n    // console.log('from submit', this.state.convoRequest.ffPhoneNum);\r\n\r\n    this.props\r\n      .initializeConvo({\r\n        ...this.state.convoRequest,\r\n        school:\r\n          (this.state.appKey === 'lorem' && 'ipsum') ||\r\n          (this.state.appKey === 'ipsum' && 'lorem'),\r\n      })\r\n      .then(() =>\r\n        toast('Conversation started successfully!', {\r\n          type: 'success',\r\n          className: 'toast',\r\n        }),\r\n      );\r\n    // this.handleModal2Open();\r\n    let clearedReq = {\r\n      survivornumber: '',\r\n      ffname: '',\r\n      ffnumber: '',\r\n    };\r\n    this.setState({ convoRequest: clearedReq }, () => {\r\n      this.handleModal2Open();\r\n      ReactGA.event({ category: 'User', action: 'Submit Convo Form' });\r\n    });\r\n  }; // <- Is it this random bracket, here?\r\n  // we good\r\n\r\n  changeHandler({ target }) {\r\n    this.setState(\r\n      {\r\n        convoRequest: {\r\n          ...this.state.convoRequest,\r\n          [target.name]: target.value,\r\n        },\r\n      },\r\n      // () => console.log(this.state.convoRequest, 'from change'),\r\n    );\r\n  }\r\n\r\n  handleModal1Open = () => {\r\n    this.setState({ isModal1Open: !this.state.isModal1Open });\r\n  };\r\n\r\n  handleModal2Open = () => {\r\n    this.setState({ isModal2Open: !this.state.isModal2Open });\r\n  };\r\n\r\n  changeKey = e => {\r\n    this.setState({ appKey: e.target.value });\r\n  };\r\n\r\n  submitKey = e => {\r\n    let keys = ['ipsum', 'lorem'];\r\n    keys.includes(this.state.appKey)\r\n      ? (function(env) {\r\n          env.setState({ isVerifying: true });\r\n          setTimeout(() => env.setState({ isVerified: true }), 2000);\r\n        })(this)\r\n      : alert('Invalid key');\r\n  };\r\n\r\n  render() {\r\n    let securityView = (\r\n      <div className=\"security-container\">\r\n        <p className=\"security-header\">\r\n          Please enter your provided App Key to continue\r\n        </p>\r\n        {this.state.isVerifying ? (\r\n          <>\r\n            {' '}\r\n            <Loader active size=\"massive\">\r\n              {' '}\r\n              Verifying...{' '}\r\n            </Loader>{' '}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <SForm onSubmit={e => this.submitKey(e)}>\r\n              <SInput\r\n                size=\"huge\"\r\n                className=\"security-input\"\r\n                name=\"appKey\"\r\n                label=\"App Key\"\r\n                type=\"password\"\r\n                fluid\r\n                onChange={e => this.changeKey(e)}\r\n              />\r\n            </SForm>\r\n            <div className=\"button-container\">\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={!this.state.appKey ? true : false}\r\n                size=\"huge\"\r\n                onClick={e => this.submitKey(e)}\r\n                style={{ backgroundColor: '#2E2F38', color: 'white' }}\r\n                toggle\r\n                tabIndex={0}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n    let formView = (\r\n      <div className=\"stage\">\r\n        <ToastContainer />\r\n        <div className=\"stage-left\">\r\n          <div className=\"stage-title\">\r\n            <h1>Almost there . . .</h1>\r\n            <p>Placeholder; explanation on how to begin.</p>\r\n            <p className=\"required\">* Required</p>\r\n          </div>\r\n          <div className=\"lime-card\" />\r\n        </div>\r\n        <div className=\"float-plane\">\r\n          <Segment className=\"float-box\">\r\n            <Container className=\"content-box\">\r\n              {/* <Form onValidSubmit={() => this.submitHandler()} size={\"huge\"}> */}\r\n              <Form\r\n                onValidSubmit={() => this.handleModal2Open()}\r\n                size={'large'}\r\n              >\r\n                <Grid columns={1} className=\"tablet mobile only\">\r\n                  <Grid.Column>\r\n                    <div className=\"text-box\">\r\n                      <h5>Lorem</h5>\r\n                      <p>\r\n                        Lorem ipsum, dolor sit amet consectetur adipisicing\r\n                        elit. Ipsa nostrum rem dignissimos est. Id quisquam\r\n                        nihil adipisci libero harum iste voluptatibus atque hic\r\n                        neque odit! Blanditiis et non voluptatem eius.\r\n                      </p>\r\n                    </div>\r\n                    <Form.Group grouped>\r\n                      <Form.Input\r\n                        name=\"survivornumber\"\r\n                        label=\"Your Phone Number \"\r\n                        validations=\"isNumeric\"\r\n                        value={this.state.convoRequest.survivornumber}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                    </Form.Group>\r\n                  </Grid.Column>\r\n                  <Grid.Column>\r\n                    <div className=\"text-box\">\r\n                      <h5>Reclefrgoruihre</h5>\r\n                      <p>\r\n                        mos est. Id quisquam nihil adipisci libero harum iste\r\n                        voluptatibus atque hic neque odit! Blanditiis et non\r\n                        voluptatem e\r\n                      </p>\r\n                    </div>\r\n                    <Form.Group grouped>\r\n                      <Form.Input\r\n                        name=\"ffname\"\r\n                        label=\"Recipient's Name \"\r\n                        validations=\"isWords\"\r\n                        value={this.state.convoRequest.ffname}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                      <Form.Input\r\n                        name=\"ffnumber\"\r\n                        label=\"Recipient's Phone Number \"\r\n                        validations=\"isNumeric\"\r\n                        value={this.state.convoRequest.ffnumber}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                    </Form.Group>\r\n                  </Grid.Column>\r\n                </Grid>\r\n                <Grid columns={2} divided className=\"computer only\">\r\n                  <Grid.Column>\r\n                    <div className=\"text-box\">\r\n                      <h5>Your Lorem</h5>\r\n                      <p>\r\n                        mos est. Id quisquam nihil adipisci libero harum iste\r\n                        voluptatibus atque hic neque odit! Blanditiis et non\r\n                        voluptatem e\r\n                      </p>\r\n                    </div>\r\n                    <Form.Group grouped>\r\n                      <Form.Input\r\n                        name=\"survivornumber\"\r\n                        label=\"Your Phone Number \"\r\n                        validations=\"isNumeric\"\r\n                        value={this.state.convoRequest.survivornumber}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                    </Form.Group>\r\n                  </Grid.Column>\r\n                  <Grid.Column>\r\n                    <div className=\"text-box\">\r\n                      <h5>Recipient's Lorem</h5>\r\n                      <p>\r\n                        mos est. Id quisquam nihil adipisci libero harum iste\r\n                        voluptatibus atque hic neque odit! Blanditiis et non\r\n                        voluptatem e\r\n                      </p>\r\n                    </div>\r\n                    <Form.Group grouped>\r\n                      <Form.Input\r\n                        name=\"ffname\"\r\n                        label=\"Recipient's Name \"\r\n                        validations=\"isWords\"\r\n                        value={this.state.convoRequest.ffname}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                      <Form.Input\r\n                        name=\"ffnumber\"\r\n                        label=\"Recipient's Phone Number \"\r\n                        validations=\"isNumeric\"\r\n                        value={this.state.convoRequest.ffnumber}\r\n                        required\r\n                        onChange={e => this.changeHandler(e)}\r\n                        fluid\r\n                      />\r\n                    </Form.Group>\r\n                  </Grid.Column>\r\n                </Grid>\r\n                <Container className=\"agree-submit\">\r\n                  <Checkbox\r\n                    className=\"termsCheckbox\"\r\n                    name=\"survivorLiability\"\r\n                    label={\r\n                      <label className=\"agree-checktext\">\r\n                        I accept the\r\n                        <Modal\r\n                          trigger={\r\n                            <Header\r\n                              as=\"h3\"\r\n                              color=\"#2E2F38\"\r\n                              content={'Terms of Service'}\r\n                              onClick={this.handleModal1Open}\r\n                            />\r\n                          }\r\n                          open={this.state.isModalOpen}\r\n                          onClose={this.handleModalOpen}\r\n                        >\r\n                          <Modal.Header>Terms of Service</Modal.Header>\r\n                          <Modal.Content>\r\n                            <TOS />\r\n                          </Modal.Content>\r\n                        </Modal>\r\n                      </label>\r\n                    }\r\n                    validations=\"isTrue\"\r\n                  />\r\n                  <Modal\r\n                    trigger={\r\n                      <Button\r\n                        size=\"huge\"\r\n                        style={{ backgroundColor: '#2E2F38', color: 'white' }}\r\n                        content={'Preview Text'}\r\n                        onValidSubmit={() => this.handleModal2Open()}\r\n                      />\r\n                    }\r\n                    open={this.state.isModal2Open}\r\n                    onClose={this.handleModal2Open}\r\n                  >\r\n                    <Modal.Header>\r\n                      <div className=\"form-submit\">\r\n                        <text>Text Preview</text>\r\n                        <Button\r\n                          style={{ backgroundColor: '#2E2F38', color: 'white' }}\r\n                          size=\"large\"\r\n                          onClick={() => this.submitHandler()}\r\n                        >\r\n                          Send Text\r\n                        </Button>\r\n                      </div>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                      <div className=\"preview-container\">\r\n                        <img\r\n                          className=\"preview-img\"\r\n                          src=\"assets/messagepreview.png\"\r\n                        />\r\n                      </div>\r\n                    </Modal.Content>\r\n                  </Modal>\r\n                </Container>\r\n              </Form>\r\n            </Container>\r\n          </Segment>\r\n        </div>\r\n      </div>\r\n    );\r\n    return <>{!this.state.isVerified ? securityView : formView}</>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isSending: state.initConvo.isSending,\r\n    isSent: state.initConvo.isSent,\r\n    sendingError: state.initConvo.sendingError,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { initializeConvo },\r\n)(FormView);\r\n"]},"metadata":{},"sourceType":"module"}